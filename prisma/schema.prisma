generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  username      String?    @unique
  image         String?
  admin         Boolean    @default(false)
  banned        Boolean    @default(false)
  bannedAt      DateTime?
  accounts      Account[]
  sessions      Session[]
  File          File[]
  BannedIPs     BannedIP[]
  Usernames     Username[]
  URLs          URL[]
}

model Username {
  username String @unique
  id       String
  user     User   @relation(fields: [id], references: [id])
}

model BannedIP {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  expiredAt DateTime?
  active    Boolean   @default(true)
  ip        String
  user      User      @relation(fields: [userId], references: [id])
  userId    String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model File {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  url       String   @unique
  content   Bytes
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  ip        String
}

model URL {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  url       String   @unique
  target    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  ip        String
}
